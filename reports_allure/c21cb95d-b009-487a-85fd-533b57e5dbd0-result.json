{"name": "test_register[case2]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "case = {'Database Assertion': None, 'Expected Result': '{\"text\":\"用户名应由4-16位数字字母下划线组成\"}', 'Headers': '{\"Content-Type\":\"application/json\",\"Accept-Language\":\"zh\"}', 'Method': 'PUT', ...}\n\n    @pytest.mark.parametrize(\"case\", case_all)\n    def test_register(case):\n    \n        resp = api_request(case)\n    \n        expected_result_str = case[\"Expected Result\"]\n        db_assert_str = case[\"Database Assertion\"]\n    \n        # resp = requests.request(method,url,headers=eval(header),json=eval(param))\n>       response_assert(resp, expected_result_str)\n\ntestcases\\test_register.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntools\\handle_assert.py:41: in response_assert\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresp = <Response [400]>, expected_result_str = '{\"text\":\"用户名应由4-16位数字字母下划线组成\"}'\n\n    def response_assert(resp, expected_result_str):\n    \n        logger.info(\"Starting assertion process\")\n        if expected_result_str is None:\n            logger.info(\"This case doesn't need assertion.\")\n            return\n        expected_result_str = replace_variable(expected_result_str)\n        expected_result_dic = json.loads(expected_result_str)\n    \n        for k, v in expected_result_dic.items():\n            actual_result = None\n            if k.startswith(\"$\"):\n                actual_result = jsonpath(resp.json(), k)[0]\n                logger.info(f\"Actual result: {actual_result}\")\n                logger.info(f\"Expected result: {v}\")\n                try:\n                    assert actual_result == v\n                    logger.info(\"Assertion Successful\")\n                except AssertionError as e:\n                    logger.info(\"Assertion failed.\")\n                    raise e\n            elif k == \"text\":\n                actual_result = resp.text\n                logger.info(f\"Actual result: {actual_result}\")\n                logger.info(f\"Expected result: {v}\")\n                try:\n>                   assert actual_result == v\nE                   AssertionError\n\ntools\\handle_assert.py:37: AssertionError"}, "parameters": [{"name": "case", "value": "{'Test Case ID': 4, 'Test Case Title': '注册接口请求,用户名为长度异常', 'Priority': 'p0', 'Method': 'PUT', 'URL': 'http://mall.lemonban.com:8107/user/registerOrBindUser', 'Headers': '{\"Content-Type\":\"application/json\",\"Accept-Language\":\"zh\"}', 'Parameters': '{\"appType\":3,\"checkRegisterSmsFlag\":\"#check_code#\",\"mobile\":\"#generate_unregistered_phone_num#\",\"userName\":\"lem\",\"password\":\"lemon123456\",\"registerOrBind\":1,\"validateType\":1}', 'Expected Result': '{\"text\":\"用户名应由4-16位数字字母下划线组成\"}', 'Variable Extracted': None, 'Sql Extracted': None, 'Database Assertion': None}"}], "start": 1738042054620, "stop": 1738042077113, "uuid": "4dc3426a-bc61-4452-87ca-b549cfee5b5d", "historyId": "7ea4ca6468dd98f2b46fccfa71e30c76", "testCaseId": "271726d0495139d0d03dfc564d9bf51a", "fullName": "testcases.test_register#test_register", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_register"}, {"name": "host", "value": "summer"}, {"name": "thread", "value": "21308-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_register"}]}