{"name": "test_add_to_cart[case4]", "status": "broken", "statusDetails": {"message": "KeyError: '\"Test Case Title\"'", "trace": "self = <allure_pytest.listener.AllureListener object at 0x00000253587F3460>\nitem = <Function test_add_to_cart[case4]>\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        if not self._cache.get(item.nodeid):\n            uuid = self._cache.push(item.nodeid)\n            test_result = TestResult(name=item.name, uuid=uuid, start=now(), stop=now())\n            self.allure_logger.schedule_test(uuid, test_result)\n        yield\n        self._update_fixtures_children(item)\n        uuid = self._cache.get(item.nodeid)\n        test_result = self.allure_logger.get_test(uuid)\n        params = item.callspec.params if hasattr(item, 'callspec') else {}\n>       test_result.name = allure_name(item, params)\n\nD:\\Python3.9\\lib\\site-packages\\allure_pytest\\listener.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python3.9\\lib\\site-packages\\allure_pytest\\utils.py:114: in allure_name\n    return SafeFormatter().format(title, **{**parameters, **item.funcargs}) if title else name\nD:\\Python3.9\\lib\\string.py:161: in format\n    return self.vformat(format_string, args, kwargs)\nD:\\Python3.9\\lib\\string.py:165: in vformat\n    result, _ = self._vformat(format_string, args, kwargs, used_args, 2)\nD:\\Python3.9\\lib\\string.py:205: in _vformat\n    obj, arg_used = self.get_field(field_name, args, kwargs)\nD:\\Python3.9\\lib\\site-packages\\allure_commons\\utils.py:449: in get_field\n    return super().get_field(field_name, args, kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons.utils.SafeFormatter object at 0x00000253679F30A0>\nfield_name = 'case[\"Test Case Title\"]', args = ()\nkwargs = {'_session_faker': <faker.proxy.Faker object at 0x0000025367A50FD0>, 'case': {'Database Assertion': None, 'Expected Re...ken_type##access_token#\"}', 'Method': 'POST', ...}, 'request': <FixtureRequest for <Function test_add_to_cart[case4]>>}\n\n    def get_field(self, field_name, args, kwargs):\n        first, rest = _string.formatter_field_name_split(field_name)\n    \n        obj = self.get_value(first, args, kwargs)\n    \n        # loop through the rest of the field_name, doing\n        #  getattr or getitem as needed\n        for is_attr, i in rest:\n            if is_attr:\n                obj = getattr(obj, i)\n            else:\n>               obj = obj[i]\nE               KeyError: '\"Test Case Title\"'\n\nD:\\Python3.9\\lib\\string.py:278: KeyError"}, "start": 1738041869367, "stop": 1738041869367, "uuid": "ccc84276-0a83-4a3f-a490-1e072cded080", "labels": [{"name": "suite", "value": "add to cart"}, {"name": "parentSuite", "value": "testcases"}, {"name": "host", "value": "summer"}, {"name": "thread", "value": "21308-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_add_to_cart"}]}